<?php

/**
 * File generated by the QueryBuilderRepositoryGeneratorBundle
 * DO NOT MODIFY IT, CHANGES WOULD BE OVERWRITTEN
 */
namespace {{ namespace }};

use Doctrine\ORM\EntityNotFoundException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;
use Doctrine\ORM\Query\Expr\Comparison;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Uid\Uuid;
use Symfony\Contracts\Cache\CacheInterface;
use Symfony\Contracts\Cache\ItemInterface;

/**
 * Generated class for filter query builders
 *
 */
class {{ entityClassname }}Base extends {{ extendClass }}
{
    protected static $parameterIndex = 0;

    public function __construct(
        protected CacheInterface $appCache,
        ManagerRegistry $registry,
        string $entity = \{{ entityClasspath }}::class,
    ) {
        parent::__construct($registry, $entity);
    }

    public static function getName(): string
    {
        return '{{ entityDql }}';
    }

    public static function getParameterIndex(): string
    {
        return '{{ entityDql }}'.static::$parameterIndex++;
    }

    public function getNewQueryBuilder(): QueryBuilder
    {
        return $this->createQueryBuilder('{{ entityDql }}');
    }

    private function getCachedResult(
        QueryBuilder $qb,
        string $methodName,
        string|int|null $hydrationMode = null,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ): mixed {
        $query = $qb->getQuery();

        if (!method_exists($query, $methodName)) {
            throw new \Exception("The methode $methodName of QueryBuilder does not exist");
        }

        if (!$useQueryCache) {
            if ($hydrationMode) {
                return $query->$methodName($hydrationMode);
            }
            return $query->$methodName();
        }

        if (null === $cacheId) {
            throw new \Exception('The cacheId must be provided to use useQueryCache');
        }

        return $this->appCache->get($cacheId, function (ItemInterface $item) use ($query, $methodName, $hydrationMode, $resultCacheTags): mixed {
            foreach ($resultCacheTags as $cacheTag) {
                $item->tag($cacheTag);
            }

            if ($hydrationMode) {
                return $query->$methodName($hydrationMode);
            }
            return $query->$methodName();
        });
    }

    public function getQueryBuilderResult(
        QueryBuilder $qb,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ) {
        return $this->getCachedResult(
            qb: $qb,
            methodName: 'getResult',
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );
    }

    public function getQueryBuilderSingleResult(
        QueryBuilder $qb,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ) {
        return $this->getCachedResult(
            qb: $qb,
            methodName: 'getSingleResult',
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );
    }

    public function getQueryBuilderOneOrNullResult(
        QueryBuilder $qb,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ) {
        return $this->getCachedResult(
            qb: $qb,
            methodName: 'getOneOrNullResult',
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );
    }

    public function getQueryBuilderArrayResult(
        QueryBuilder $qb,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ) {
        return $this->getCachedResult(
            qb: $qb,
            methodName: 'getArrayResult',
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );
    }

    public function getQueryBuilderSingleArrayResult(
        QueryBuilder $qb,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ) {
        return $this->getCachedResult(
            qb: $qb,
            methodName: 'getSingleResult',
            hydrationMode: Query::HYDRATE_ARRAY,
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );
    }

    public function getQueryBuilderScalarResult(
        QueryBuilder $qb,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ) {
        return $this->getCachedResult(
            qb: $qb,
            methodName: 'getScalarResult',
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );
    }

    public function getQueryBuilderSingleScalarResult(
        QueryBuilder $qb,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ) {
        return $this->getCachedResult(
            qb: $qb,
            methodName: 'getSingleScalarResult',
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );
    }

    public function getQueryBuilderCount(
        QueryBuilder $qb,
        $entityName = '{{ entityDql }}',
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ): int {
        $qb->select('count('.$entityName.') as total');
        $total = $this->getQueryBuilderSingleArrayResult(
            qb: $qb,
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );

        return $total['total'];
    }

    public function exists(
        $entity,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ): bool {
        if (null === $entity) {
            throw new \LogicException('The entity parameter must be provided, it can not be null');
        }

        $exists = false;

        $qb = $this->getNewQueryBuilder();
        $entityId = $entity->getId();
        static::filterById($qb, $entityId);

        $result = static::getQueryBuilderOneOrNullResult(
            qb: $qb,
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );

        if (null !==  $result) {
            //the entity was found
            $exists = true;
        }

        return $exists;
    }

    public function getDeleteQueryBuilder(
    ): QueryBuilder {
        $qb = $this->createQueryBuilder('{{ entityDql }}');
        $qb->delete($this->getEntityName(), '{{ entityDql }}');

        return $qb;
    }

    public function existsByQueryBuilder(
        QueryBuilder $qb,
        string $columnName = 'id',
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ): bool {
        $exists = false;
        $qb->select($qb->expr()->count('{{ entityDql }}.'.$columnName));

        $count = $this->getQueryBuilderSingleScalarResult(
            qb: $qb,
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );

        if ($count > 0) {
            $exists = true;
        }

        return $exists;
    }

    public function findOne(
        $id,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ): \{{ entityClasspath }} {
        // try to extract the value from an enum
        if (is_object($id)) {
            $ref = new \ReflectionClass($id);
            if ($ref->isEnum()) {
                $id = $id->value;
            }
        }
{% if idType == 'uuid' %}
        if (is_string($id)) {
            $id = Uuid::fromString($id);
        }
{% endif %}
        $qb = $this->getNewQueryBuilder();
        static::filterById($qb, $id);

        try {
            $entity = static::getQueryBuilderSingleResult(
                qb: $qb,
                useQueryCache: $useQueryCache,
                cacheId: $cacheId,
                resultCacheTags: $resultCacheTags,
            );
        } catch (EntityNotFoundException|NoResultException $ex) {
            throw EntityNotFoundException::fromClassNameAndIdentifier(\{{ entityClasspath }}::class, [$id]);
        }

        return $entity;
    }
