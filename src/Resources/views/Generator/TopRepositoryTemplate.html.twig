<?php

/**
 * File generated by the QueryBuilderRepositoryGeneratorBundle
 * DO NOT MODIFY IT, CHANGES WOULD BE OVERWRITTEN
 */
namespace {{ namespace }};

use Doctrine\ORM\EntityNotFoundException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;
use Doctrine\ORM\Query\Expr\Comparison;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Uid\Uuid;

/**
 * Generated class for filter query builders
 *
 */
class {{ entityClassname }}Base extends {{ extendClass }}
{
    protected static $parameterIndex = 0;

    public function __construct(ManagerRegistry $registry, string $entity = \{{ entityClasspath }}::class)
    {
        parent::__construct($registry, $entity);
    }

    public static function getName(): string
    {
        return '{{ entityDql }}';
    }

    public static function getParameterIndex(): string
    {
        return '{{ entityDql }}'.static::$parameterIndex++;
    }

    public function getNewQueryBuilder(): QueryBuilder
    {
        return $this->createQueryBuilder('{{ entityDql }}');
    }

    public static function getQueryBuilderResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getResult();
    }

    public static function getQueryBuilderSingleResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getSingleResult();
    }

    public static function getQueryBuilderOneOrNullResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getOneOrNullResult();
    }

    public static function getQueryBuilderArrayResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getArrayResult();
    }

    public static function getQueryBuilderSingleArrayResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getSingleResult(Query::HYDRATE_ARRAY);
    }

    public static function getQueryBuilderScalarResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getScalarResult();
    }

    public static function getQueryBuilderSingleScalarResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getSingleScalarResult();
    }

    public static function getQueryBuilderCount(QueryBuilder $qb, $entityName = '{{ entityDql }}'): int
    {
        $qb->select('count('.$entityName.') as total');
        $total = self::getQueryBuilderSingleArrayResult($qb);

        return $total['total'];
    }

    public function exists($entity): bool
    {
        if (null === $entity) {
            throw new \LogicException('The entity parameter must be provided, it can not be null');
        }

        $exists = false;

        $qb = $this->getNewQueryBuilder();
        $entityId = $entity->getId();
        static::filterById($qb, $entityId);

        $result = static::getQueryBuilderOneOrNullResult($qb);

        if (null !==  $result) {
            //the entity was found
            $exists = true;
        }

        return $exists;
    }

    public function getDeleteQueryBuilder(): QueryBuilder
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->delete($this->_entityName, '{{ entityDql }}');

        return $qb;
    }

    public static function existsByQueryBuilder(QueryBuilder $qb, $columnName = 'id', $useQueryCache = false): bool
    {
        $exists = false;
        $qb->select($qb->expr()->count('{{ entityDql }}.'.$columnName));

        $count = static::getQueryBuilderSingleScalarResult($qb, $useQueryCache);

        if ($count > 0) {
            $exists = true;
        }

        return $exists;
    }

    public function findOne($id): \{{ entityClasspath }}
    {
        // try to extract the value from an enum
        if (is_object($id)) {
            $ref = new \ReflectionClass($id);
            if ($ref->isEnum()) {
                $id = $id->value;
            }
        }
{% if idType == 'uuid' %}
        if (is_string($id)) {
            $id = Uuid::fromString($id);
        }
{% endif %}
        $qb = $this->getNewQueryBuilder();
        static::filterById($qb, $id);

        try {
            $entity = static::getQueryBuilderSingleResult($qb);
        } catch (EntityNotFoundException|NoResultException $ex) {
            throw EntityNotFoundException::fromClassNameAndIdentifier(\{{ entityClasspath }}::class, [$id]);
        }

        return $entity;
    }
