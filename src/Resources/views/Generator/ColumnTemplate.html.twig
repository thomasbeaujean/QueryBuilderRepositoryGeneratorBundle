
    public static function filterBy{{ column }}(
        QueryBuilder $qb,
        $value,
        $operator = Comparison::EQ,
        $entityName = self::NAME,
        $columnName = '{{ columnDql }}',
    ): QueryBuilder {
        if ($value === null) {
            if (Comparison::NEQ === $operator) {
                $qb->andWhere($entityName.'.'.$columnName.' IS NOT NULL');
            } else {
                $qb->andWhere($entityName.'.'.$columnName.' IS NULL');
            }
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;

            $qb->andWhere($entityName.'.'.$columnName.$operator.':'.$parameterName);
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public static function filterIn{{ column }}(
        QueryBuilder $qb,
        $value,
        $entityName = self::NAME,
        $columnName = '{{ columnDql }}',
    ): QueryBuilder {
        if ($value === null) {
            $qb->andWhere($entityName.'.'.$columnName.' IS NULL');
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;
            $qb->andWhere($entityName.'.'.$columnName.' IN (:'.$parameterName.')');
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public static function filterNotIn{{ column }}(
        QueryBuilder $qb,
        $value,
        $entityName = self::NAME,
        $columnName = '{{ columnDql }}',
    ): QueryBuilder {
        if ($value === null) {
            $qb->andWhere($entityName.'.'.$columnName.' IS NOT NULL');
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;

            $qb->andWhere($entityName.'.'.$columnName.' NOT IN (:'.$parameterName.')');
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public function findBy{{ column }}(
        mixed $value,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ): array {
        $qb = $this->getNewQueryBuilder();
        static::filterBy{{ column }}($qb, $value);

        return $this->getQueryBuilderResult(
            qb: $qb,
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );
    }

    public function findOneBy{{ column }}(
        mixed $value,
        bool $allowNull = false,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ): ?\{{ entityClasspath }} {
        $qb = $this->getNewQueryBuilder();
        static::filterBy{{ column }}($qb, $value);

        if ($allowNull) {
            return $this->getQueryBuilderOneOrNullResult(
                qb: $qb,
                useQueryCache: $useQueryCache,
                cacheId: $cacheId,
                resultCacheTags: $resultCacheTags,
            );
        }

        return $this->getQueryBuilderSingleResult(
            qb: $qb,
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );
    }

    public function countBy{{ column }}(
        mixed $value,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ): int {
        $qb = $this->getNewQueryBuilder();
        static::filterBy{{ column }}($qb, $value);

        return static::getQueryBuilderCount(
            qb: $qb,
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );
    }

    public function existsBy{{ column }}(
        mixed $value,
        bool $useQueryCache = false,
        ?string $cacheId = null,
        array $resultCacheTags = [],
    ): bool {
        $qb = $this->getNewQueryBuilder();
        static::filterBy{{ column }}($qb, $value);

        return static::existsByQueryBuilder(
            qb: $qb,
            useQueryCache: $useQueryCache,
            cacheId: $cacheId,
            resultCacheTags: $resultCacheTags,
        );
    }

    public function deleteBy{{ column }}(
        mixed $value,
    ): void
    {
        $qb = $this->getDeleteQueryBuilder();
        static::filterBy{{ column }}($qb, $value);

        static::getQueryBuilderResult($qb);
    }
