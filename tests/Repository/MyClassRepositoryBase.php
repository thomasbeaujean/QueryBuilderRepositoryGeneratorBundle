<?php

/**
 * File generated by the QueryBuilderRepositoryGeneratorBundle
 * DO NOT MODIFY IT, CHANGES WOULD BE OVERWRITTEN
 */
namespace Tbn\QueryBuilderRepositoryGeneratorBundle\Tests\Repository;

use Doctrine\ORM\EntityNotFoundException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query;
use Doctrine\ORM\Query\Expr\Comparison;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use Symfony\Component\Uid\Uuid;

/**
 * Generated class for filter query builders
 *
 */
class MyClassRepositoryBase extends \Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository
{
    protected static $parameterIndex = 0;

    public function __construct(ManagerRegistry $registry, string $entity = \Tbn\QueryBuilderRepositoryGeneratorBundle\Tests\Entity\MyClass::class)
    {
        parent::__construct($registry, $entity);
    }

    public static function getName(): string
    {
        return 'myClass';
    }

    public static function getParameterIndex(): string
    {
        return 'myClass'.static::$parameterIndex++;
    }

    public function getNewQueryBuilder(): QueryBuilder
    {
        return $this->createQueryBuilder('myClass');
    }

    public static function getQueryBuilderResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getResult();
    }

    public static function getQueryBuilderSingleResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getSingleResult();
    }

    public static function getQueryBuilderOneOrNullResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getOneOrNullResult();
    }

    public static function getQueryBuilderArrayResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getArrayResult();
    }

    public static function getQueryBuilderSingleArrayResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getSingleResult(Query::HYDRATE_ARRAY);
    }

    public static function getQueryBuilderScalarResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getScalarResult();
    }

    public static function getQueryBuilderSingleScalarResult(QueryBuilder $qb, $useQueryCache = false)
    {
        $query = $qb->getQuery();
        $query->useQueryCache($useQueryCache);

        return $query->getSingleScalarResult();
    }

    public static function getQueryBuilderCount(QueryBuilder $qb, $entityName = 'myClass'): int
    {
        $qb->select('count('.$entityName.') as total');
        $total = self::getQueryBuilderSingleArrayResult($qb);

        return $total['total'];
    }

    public function exists($entity): bool
    {
        if (null === $entity) {
            throw new \LogicException('The entity parameter must be provided, it can not be null');
        }

        $exists = false;

        $qb = $this->getNewQueryBuilder();
        $entityId = $entity->getId();
        static::filterById($qb, $entityId);

        $result = static::getQueryBuilderOneOrNullResult($qb);

        if (null !==  $result) {
            //the entity was found
            $exists = true;
        }

        return $exists;
    }

    public function getDeleteQueryBuilder(): QueryBuilder
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->delete($this->_entityName, 'myClass');

        return $qb;
    }

    public static function existsByQueryBuilder(QueryBuilder $qb, $columnName = 'id', $useQueryCache = false): bool
    {
        $exists = false;
        $qb->select($qb->expr()->count('myClass.'.$columnName));

        $count = static::getQueryBuilderSingleScalarResult($qb, $useQueryCache);

        if ($count > 0) {
            $exists = true;
        }

        return $exists;
    }

    public function findOne($id): \Tbn\QueryBuilderRepositoryGeneratorBundle\Tests\Entity\MyClass
    {
        // try to extract the value from an enum
        if (is_object($id)) {
            $ref = new \ReflectionClass($id);
            if ($ref->isEnum()) {
                $id = $id->value;
            }
        }
        $qb = $this->getNewQueryBuilder();
        static::filterById($qb, $id);

        try {
            $entity = static::getQueryBuilderSingleResult($qb);
        } catch (EntityNotFoundException|NoResultException $ex) {
            throw EntityNotFoundException::fromClassNameAndIdentifier(\Tbn\QueryBuilderRepositoryGeneratorBundle\Tests\Entity\MyClass::class, [$id]);
        }

        return $entity;
    }

    public static function filterById(QueryBuilder $qb, $value, $operator = Comparison::EQ, $entityName = 'myClass', $columnName = 'id'): QueryBuilder
    {
        if ($value === null) {
            if (Comparison::NEQ === $operator) {
                $qb->andWhere($entityName.'.'.$columnName.' IS NOT NULL');
            } else {
                $qb->andWhere($entityName.'.'.$columnName.' IS NULL');
            }
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;

            $qb->andWhere($entityName.'.'.$columnName.$operator.':'.$parameterName);
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public static function filterInId(QueryBuilder $qb, $value, $entityName = 'myClass', $columnName = 'id'): QueryBuilder
    {
        if ($value === null) {
            $qb->andWhere($entityName.'.'.$columnName.' IS NULL');
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;
            $qb->andWhere($entityName.'.'.$columnName.' IN (:'.$parameterName.')');
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public static function filterNotInId(QueryBuilder $qb, $value, $entityName = 'myClass', $columnName = 'id'): QueryBuilder
    {
        if ($value === null) {
            $qb->andWhere($entityName.'.'.$columnName.' IS NOT NULL');
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;

            $qb->andWhere($entityName.'.'.$columnName.' NOT IN (:'.$parameterName.')');
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public static function filterByNumber(QueryBuilder $qb, $value, $operator = Comparison::EQ, $entityName = 'myClass', $columnName = 'number'): QueryBuilder
    {
        if ($value === null) {
            if (Comparison::NEQ === $operator) {
                $qb->andWhere($entityName.'.'.$columnName.' IS NOT NULL');
            } else {
                $qb->andWhere($entityName.'.'.$columnName.' IS NULL');
            }
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;

            $qb->andWhere($entityName.'.'.$columnName.$operator.':'.$parameterName);
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public static function filterInNumber(QueryBuilder $qb, $value, $entityName = 'myClass', $columnName = 'number'): QueryBuilder
    {
        if ($value === null) {
            $qb->andWhere($entityName.'.'.$columnName.' IS NULL');
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;
            $qb->andWhere($entityName.'.'.$columnName.' IN (:'.$parameterName.')');
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public static function filterNotInNumber(QueryBuilder $qb, $value, $entityName = 'myClass', $columnName = 'number'): QueryBuilder
    {
        if ($value === null) {
            $qb->andWhere($entityName.'.'.$columnName.' IS NOT NULL');
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;

            $qb->andWhere($entityName.'.'.$columnName.' NOT IN (:'.$parameterName.')');
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public static function filterByName(QueryBuilder $qb, $value, $operator = Comparison::EQ, $entityName = 'myClass', $columnName = 'name'): QueryBuilder
    {
        if ($value === null) {
            if (Comparison::NEQ === $operator) {
                $qb->andWhere($entityName.'.'.$columnName.' IS NOT NULL');
            } else {
                $qb->andWhere($entityName.'.'.$columnName.' IS NULL');
            }
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;

            $qb->andWhere($entityName.'.'.$columnName.$operator.':'.$parameterName);
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public static function filterInName(QueryBuilder $qb, $value, $entityName = 'myClass', $columnName = 'name'): QueryBuilder
    {
        if ($value === null) {
            $qb->andWhere($entityName.'.'.$columnName.' IS NULL');
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;
            $qb->andWhere($entityName.'.'.$columnName.' IN (:'.$parameterName.')');
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public static function filterNotInName(QueryBuilder $qb, $value, $entityName = 'myClass', $columnName = 'name'): QueryBuilder
    {
        if ($value === null) {
            $qb->andWhere($entityName.'.'.$columnName.' IS NOT NULL');
        } else {
            //get a uniq index
            $index = static::getParameterIndex();
            $parameterName = $columnName.$index;

            $qb->andWhere($entityName.'.'.$columnName.' NOT IN (:'.$parameterName.')');
            $qb->setParameter($parameterName, $value);
        }

        return $qb;
    }

    public static function filterByForeignClasses(QueryBuilder $qb, $value, $operator = Comparison::EQ, $entityName = 'myClass', $columnName = 'foreignClasses'): QueryBuilder
    {
        //get a uniq index
        $index = static::getParameterIndex();
        $parameterName = $columnName.$index;

        unset($index);

        if ($value === null) {
            if (Comparison::NEQ === $operator) {
                $qb->andWhere($entityName.'.'.$columnName.' IS NOT NULL');
            } else {
                $qb->andWhere($entityName.'.'.$columnName.' IS NULL');
            }
        } else {
            $qb->andWhere($entityName.'.'.$columnName.$operator.':'.$parameterName);

            // by default we use the value
            $id = $value;

            // value might be an enum
            if (is_object($value)) {
                $ref = new \ReflectionClass($value);
                if ($ref->isEnum()) {
                    $value = $value->value;
                }
            }

            if ($value instanceof \Tbn\QueryBuilderRepositoryGeneratorBundle\Tests\Entity\ForeignClass) {
                $id = $value->getId();
            }
            $qb->setParameter($parameterName, $id);
        }

        return $qb;
    }

    public static function filterInForeignClasses(QueryBuilder $qb, $values, $entityName = 'myClass', $columnName = 'foreignClasses'): QueryBuilder
    {
        //get a uniq index
        $index = static::getParameterIndex();
        $parameterName = $columnName.$index;

        unset($index);

        if ($values === null) {
            $qb->andWhere($entityName.'.'.$columnName.' IS NULL');
        } else {
            $ids = array();
            //the array might contains a null value
            $orNull = '';

            foreach ($values as $value) {
                if ($value !== null) {
                    $ids[] = $value->getId();
                } else {
                    $orNull = ' OR '.$entityName.'.'.$columnName.' IS NULL';
                }
            }

            $qb->andWhere($entityName.'.'.$columnName.' IN (:'.$parameterName.')'.$orNull);
            $qb->setParameter($parameterName, $ids);
        }

        return $qb;
    }

    public static function filterNotInForeignClasses(QueryBuilder $qb, $values, $entityName = 'myClass', $columnName = 'foreignClasses'): QueryBuilder
    {
        //get a uniq index
        $index = static::getParameterIndex();
        $parameterName = $columnName.$index;

        unset($index);

        if ($values === null) {
            $qb->andWhere($entityName.'.'.$columnName.' IS NOT NULL');
        } else {
            $ids = array();

            foreach ($values as $value) {
                $ids[] = $value->getId();
            }
            $qb->andWhere($entityName.'.'.$columnName.' NOT IN (:'.$parameterName.')');
            $qb->setParameter($parameterName, $ids);
        }

        return $qb;
    }

    public static function joinForeignClasses(QueryBuilder $qb, $entityName = 'myClass', $columnName = 'foreignClasses', $entityDqlTargeted = 'foreignClass'): QueryBuilder
    {
        $qb->join($entityName.'.'.$columnName, $entityDqlTargeted);

        return $qb;
    }
}
